{
  "config": {
    "abort": {
      "already_configured": "[%key:common::config_flow::abort::already_configured_device%]",
      "another_device": "Re-configuration was unsuccessful, the IP address/hostname of another Shelly device was used.",
      "firmware_not_fully_provisioned": "Device not fully provisioned. Please contact Shelly support",
      "ipv6_not_supported": "IPv6 is not supported.",
      "mac_address_mismatch": "[%key:component::shelly::config::error::mac_address_mismatch%]",
      "reauth_successful": "[%key:common::config_flow::abort::reauth_successful%]",
      "reauth_unsuccessful": "Re-authentication was unsuccessful, please remove the integration and set it up again.",
      "reconfigure_successful": "[%key:common::config_flow::abort::reconfigure_successful%]"
    },
    "error": {
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "custom_port_not_supported": "Gen1 device does not support custom port.",
      "invalid_auth": "[%key:common::config_flow::error::invalid_auth%]",
      "invalid_host": "[%key:common::config_flow::error::invalid_host%]",
      "mac_address_mismatch": "The MAC address of the device does not match the one in the configuration, please reboot the device and try again.",
      "unknown": "[%key:common::config_flow::error::unknown%]"
    },
    "flow_title": "{name}",
    "step": {
      "confirm_discovery": {
        "description": "Do you want to set up the {model} at {host}?\n\nBattery-powered devices that are password-protected must be woken up before continuing with setting up.\nBattery-powered devices that are not password-protected will be added when the device wakes up, you can now manually wake the device up using a button on it or wait for the next data update from the device."
      },
      "credentials": {
        "data": {
          "password": "[%key:common::config_flow::data::password%]",
          "username": "[%key:common::config_flow::data::username%]"
        },
        "data_description": {
          "password": "Password for the device's web panel.",
          "username": "Username for the device's web panel."
        }
      },
      "reauth_confirm": {
        "data": {
          "password": "[%key:common::config_flow::data::password%]",
          "username": "[%key:common::config_flow::data::username%]"
        },
        "data_description": {
          "password": "[%key:component::shelly::config::step::credentials::data_description::password%]",
          "username": "[%key:component::shelly::config::step::credentials::data_description::username%]"
        }
      },
      "reconfigure": {
        "data": {
          "host": "[%key:common::config_flow::data::host%]",
          "port": "[%key:common::config_flow::data::port%]"
        },
        "data_description": {
          "host": "[%key:component::shelly::config::step::user::data_description::host%]",
          "port": "[%key:component::shelly::config::step::user::data_description::port%]"
        },
        "description": "Update configuration for {device_name}.\n\nBefore setup, battery-powered devices must be woken up, you can now wake the device up using a button on it."
      },
      "user": {
        "data": {
          "host": "[%key:common::config_flow::data::host%]",
          "port": "[%key:common::config_flow::data::port%]"
        },
        "data_description": {
          "host": "The hostname or IP address of the Shelly device to connect to.",
          "port": "The TCP port of the Shelly device to connect to (Gen2+)."
        },
        "description": "Before setup, battery-powered devices must be woken up, you can now wake the device up using a button on it."
      }
    }
  },
  "device_automation": {
    "trigger_subtype": {
      "button": "Button",
      "button1": "First button",
      "button2": "Second button",
      "button3": "Third button",
      "button4": "Fourth button",
      "button5": "Fifth button"
    },
    "trigger_type": {
      "btn_down": "{subtype} button down",
      "btn_up": "{subtype} button up",
      "double": "{subtype} double clicked",
      "double_push": "{subtype} double push",
      "long": "{subtype} long clicked",
      "long_push": "{subtype} long push",
      "long_single": "{subtype} long clicked and then single clicked",
      "single": "{subtype} single clicked",
      "single_long": "{subtype} single clicked and then long clicked",
      "single_push": "{subtype} single push",
      "triple": "{subtype} triple clicked",
      "triple_push": "{subtype} triple push"
    }
  },
  "entity": {
    "climate": {
      "thermostat": {
        "state_attributes": {
          "preset_mode": {
            "state": {
              "frost_protection": "Frost protection"
            }
          }
        }
      }
    },
    "event": {
      "input": {
        "state_attributes": {
          "event_type": {
            "state": {
              "btn_down": "Button down",
              "btn_up": "Button up",
              "double": "[%key:component::shelly::entity::event::input::state_attributes::event_type::state::double_push%]",
              "double_push": "Double push",
              "long": "[%key:component::shelly::entity::event::input::state_attributes::event_type::state::long_push%]",
              "long_push": "Long push",
              "long_single": "Long push and then short push",
              "single": "[%key:component::shelly::entity::event::input::state_attributes::event_type::state::single_push%]",
              "single_long": "Short push and then long push",
              "single_push": "Single push",
              "triple": "[%key:component::shelly::entity::event::input::state_attributes::event_type::state::triple_push%]",
              "triple_push": "Triple push"
            }
          }
        }
      }
    },
    "sensor": {
      "charger_state": {
        "state": {
          "charger_charging": "[%key:common::state::charging%]",
          "charger_end": "Charge completed",
          "charger_fault": "Error while charging",
          "charger_free": "[%key:component::binary_sensor::entity_component::plug::state::off%]",
          "charger_free_fault": "Can not release plug",
          "charger_insert": "[%key:component::binary_sensor::entity_component::plug::state::on%]",
          "charger_pause": "Charging paused by charger",
          "charger_wait": "Charging paused by vehicle"
        }
      },
      "detected_objects": {
        "unit_of_measurement": "objects"
      },
      "gas_detected": {
        "state": {
          "heavy": "Heavy",
          "mild": "Mild",
          "none": "None",
          "test": "Test"
        },
        "state_attributes": {
          "options": {
            "state": {
              "heavy": "[%key:component::shelly::entity::sensor::gas_detected::state::heavy%]",
              "mild": "[%key:component::shelly::entity::sensor::gas_detected::state::mild%]",
              "none": "[%key:component::shelly::entity::sensor::gas_detected::state::none%]",
              "test": "[%key:component::shelly::entity::sensor::gas_detected::state::test%]"
            }
          }
        }
      },
      "illuminance_level": {
        "state": {
          "bright": "Bright",
          "dark": "Dark",
          "twilight": "Twilight"
        }
      },
      "operation": {
        "state": {
          "fault": "[%key:common::state::fault%]",
          "normal": "[%key:common::state::normal%]",
          "warmup": "Warm-up"
        }
      },
      "self_test": {
        "state": {
          "completed": "Completed",
          "not_completed": "Not completed",
          "pending": "Pending",
          "running": "Running"
        },
        "state_attributes": {
          "options": {
            "state": {
              "completed": "[%key:component::shelly::entity::sensor::self_test::state::completed%]",
              "not_completed": "[%key:component::shelly::entity::sensor::self_test::state::not_completed%]",
              "pending": "[%key:component::shelly::entity::sensor::self_test::state::pending%]",
              "running": "[%key:component::shelly::entity::sensor::self_test::state::running%]"
            }
          }
        }
      },
      "valve_status": {
        "state": {
          "checking": "Checking",
          "closed": "[%key:common::state::closed%]",
          "closing": "[%key:common::state::closing%]",
          "failure": "Failure",
          "opened": "Opened",
          "opening": "[%key:common::state::opening%]"
        }
      }
    }
  },
  "exceptions": {
    "auth_error": {
      "message": "Authentication failed for {device}, please update your credentials"
    },
    "device_communication_action_error": {
      "message": "Device communication error occurred while calling action for {entity} of {device}"
    },
    "device_communication_error": {
      "message": "Device communication error occurred for {device}"
    },
    "device_not_found": {
      "message": "{device} not found while configuring device automation triggers"
    },
    "firmware_unsupported": {
      "message": "{device} is running an unsupported firmware, please update the firmware"
    },
    "invalid_trigger": {
      "message": "Invalid device automation trigger (type, subtype): {trigger}"
    },
    "ota_update_connection_error": {
      "message": "Device communication error occurred while triggering OTA update for {device}"
    },
    "ota_update_rpc_error": {
      "message": "RPC call error occurred while triggering OTA update for {device}"
    },
    "rpc_call_action_error": {
      "message": "RPC call error occurred while calling action for {entity} of {device}"
    },
    "update_error": {
      "message": "An error occurred while retrieving data from {device}"
    },
    "update_error_device_disconnected": {
      "message": "An error occurred while retrieving data from {device} because it is disconnected"
    },
    "update_error_reconnect_error": {
      "message": "An error occurred while reconnecting to {device}"
    },
    "update_error_sleeping_device": {
      "message": "Sleeping device did not update within {period} seconds interval"
    }
  },
  "issues": {
    "ble_scanner_firmware_unsupported": {
      "fix_flow": {
        "abort": {
          "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
          "update_not_available": "Device does not offer firmware update. Check internet connectivity (gateway, DNS, time) and restart the device."
        },
        "step": {
          "confirm": {
            "description": "Your Shelly device {device_name} with IP address {ip_address} is running firmware {firmware} and acts as BLE scanner with active mode. This firmware version is not supported for BLE scanner active mode.\n\nSelect **Submit** button to start the OTA update to the latest stable firmware version.",
            "title": "[%key:component::shelly::issues::ble_scanner_firmware_unsupported::title%]"
          }
        }
      },
      "title": "{device_name} is running unsupported firmware"
    },
    "deprecated_firmware": {
      "fix_flow": {
        "abort": {
          "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
          "update_not_available": "[%key:component::shelly::issues::ble_scanner_firmware_unsupported::fix_flow::abort::update_not_available%]"
        },
        "step": {
          "confirm": {
            "description": "Your Shelly device {device_name} with IP address {ip_address} is running firmware {firmware}. This firmware version will not be supported by Shelly integration starting from Home Assistant {ha_version}.\n\nSelect **Submit** button to start the OTA update to the latest stable firmware version.",
            "title": "[%key:component::shelly::issues::deprecated_firmware::title%]"
          }
        }
      },
      "title": "{device_name} is running outdated firmware"
    },
    "device_not_calibrated": {
      "description": "Shelly device {device_name} with IP address {ip_address} requires calibration. To calibrate the device, it must be rebooted after proper installation on the valve. You can reboot the device in its web panel, go to 'Settings' > 'Device Reboot'.",
      "title": "Shelly device {device_name} is not calibrated"
    },
    "outbound_websocket_incorrectly_enabled": {
      "fix_flow": {
        "abort": {
          "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]"
        },
        "step": {
          "confirm": {
            "description": "Your Shelly device {device_name} with IP address {ip_address} is a non-sleeping device and Outbound WebSocket should be disabled in its configuration.\n\nSelect **Submit** button to disable Outbound WebSocket.",
            "title": "[%key:component::shelly::issues::outbound_websocket_incorrectly_enabled::title%]"
          }
        }
      },
      "title": "Outbound WebSocket is enabled for {device_name}"
    },
    "push_update_failure": {
      "description": "Home Assistant is not receiving push updates from the Shelly device {device_name} with IP address {ip_address}. Check the CoIoT configuration in the web panel of the device and your network configuration.",
      "title": "Shelly device {device_name} push update failure"
    },
    "unsupported_firmware": {
      "description": "Your Shelly device {device_name} with IP address {ip_address} is running an unsupported firmware. Please update the firmware.\n\nIf the device does not offer an update, check internet connectivity (gateway, DNS, time) and restart the device.",
      "title": "Unsupported firmware for device {device_name}"
    }
  },
  "options": {
    "abort": {
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "no_scripts_support": "Device does not support scripts and cannot be used as a Bluetooth scanner.",
      "zigbee_firmware": "A device with Zigbee firmware cannot be used as a Bluetooth scanner. Please switch to Matter firmware to use the device as a Bluetooth scanner."
    },
    "step": {
      "init": {
        "data": {
          "ble_scanner_mode": "Bluetooth scanner mode"
        },
        "data_description": {
          "ble_scanner_mode": "The scanner mode to use for Bluetooth scanning."
        },
        "description": "Bluetooth scanning can be active or passive. With active, the Shelly requests data from nearby devices; with passive, the Shelly receives unsolicited data from nearby devices."
      }
    }
  },
  "selector": {
    "ble_scanner_mode": {
      "options": {
        "active": "[%key:common::state::active%]",
        "disabled": "[%key:common::state::disabled%]",
        "passive": "Passive"
      }
    }
  }
}
