# serializer version: 1
# name: test_all_entities[sensor.echo_test_next_alarm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.echo_test_next_alarm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Next alarm',
    'platform': 'alexa_devices',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'alarm',
    'unique_id': 'echo_test_serial_number-Alarm',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.echo_test_next_alarm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Echo Test Next alarm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.echo_test_next_alarm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2023-10-01T07:00:00+00:00',
  })
# ---
# name: test_all_entities[sensor.echo_test_next_reminder-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.echo_test_next_reminder',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Next reminder',
    'platform': 'alexa_devices',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'reminder',
    'unique_id': 'echo_test_serial_number-Reminder',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.echo_test_next_reminder-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Echo Test Next reminder',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.echo_test_next_reminder',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_all_entities[sensor.echo_test_next_timer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.echo_test_next_timer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Next timer',
    'platform': 'alexa_devices',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'timer',
    'unique_id': 'echo_test_serial_number-Timer',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.echo_test_next_timer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Echo Test Next timer',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.echo_test_next_timer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_all_entities[sensor.echo_test_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.echo_test_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'alexa_devices',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'echo_test_serial_number-temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_all_entities[sensor.echo_test_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Echo Test Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.echo_test_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22.5',
  })
# ---
